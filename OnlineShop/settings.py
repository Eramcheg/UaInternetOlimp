"""
Django settings for OnlineShop project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from datetime import timedelta
from pathlib import Path

from django.urls import reverse
from django.utils.translation import gettext_lazy as _
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/
dotenv_path = BASE_DIR / '.env'

load_dotenv(dotenv_path)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')
if not SECRET_KEY:
    raise ValueError("SECRET_KEY is not stored in .env file")

FIREBASE_CREDENTIALS_FILE = os.getenv('FIREBASE_CREDENTIALS')
FIREBASE_STORAGE_BUCKET = os.getenv('FIREBASE_STORAGE_BUCKET')

AUTH_USER_MODEL = 'shop.User'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DJANGO_DEBUG', 'False') == 'True'

IS_PROD = not DEBUG

raw_hosts = os.getenv("ALLOWED_HOSTS", "localhost,127.0.0.1")
ALLOWED_HOSTS = [h.strip() for h in raw_hosts.split(',') if h.strip()]
CSRF_TRUSTED_ORIGINS = os.getenv(
    "DJANGO_CSRF_TRUSTED_ORIGINS",
    "https://www.ophs-intolymp.org,https://ophs-intolymp.org"
).split(",")

SECURE_SSL_REDIRECT = IS_PROD
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SESSION_COOKIE_SAMESITE = "Lax"
CSRF_COOKIE_SAMESITE = "Lax"

if IS_PROD:
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"
    X_FRAME_OPTIONS = "DENY"
else:
    # В разработке проще жить без редиректа/SSL-кук
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False

# CONTENT_SECURITY_POLICY_REPORT_ONLY = {
#     "EXCLUDE_URL_PREFIXES": [],
#     "DIRECTIVES": {
#         "default-src": ["'none'"],
#         "media-src": ["'self'"],
#         "script-src": [
#             "'self'",
#             "blob:",
#             "https://code.jquery.com",
#             "https://kit.fontawesome.com",
#             "https://www.googletagmanager.com",
#             "https://cdnjs.cloudflare.com"
#
#         ],
#         "style-src": [
#             "'self'",
#             "https://fonts.googleapis.com",
#             "https://maxcdn.bootstrapcdn.com",
#             "https://kit.fontawesome.com",
#             "https://cdn.jsdelivr.net"
#         ],
#         "img-src": [
#             "'self'",
#             "data:",
#             "blob:",
#             "https://www.google-analytics.com",
#         ],
#         "font-src": [
#             "'self'",
#             "https://fonts.gstatic.com",
#             "https://ka-f.fontawesome.com",
#         ],
#         "connect-src": [
#             "'self'",
#             "https://firestore.googleapis.com",
#             "https://ka-f.fontawesome.com",
#         ],
#         "frame-ancestors": ["'self'"],
#         "form-action": ["'self'"],
#         "frame-src": [
#             "'self'",
#         ],
#         "upgrade-insecure-requests": True,
#         "report-uri": "/uk/csp-report/",
#     },
# }
# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'widget_tweaks',
    'shop',
    'django_ckeditor_5',
    'axes',
    'csp',
    "storages"
]

USE_GCS = not DEBUG

if USE_GCS:
    DEFAULT_FILE_STORAGE = "storages.backends.gcloud.GoogleCloudStorage"
    GS_BUCKET_NAME = "uainternetolimp-41dd1.appspot.com"  # твой Firebase bucket

    # Сервис-аккаунт (JSON) — скачай из Firebase Console > Service Accounts
    from google.oauth2.service_account import Credentials
    import os
    GS_CREDENTIALS = Credentials.from_service_account_file(
        os.path.join(BASE_DIR, os.environ.get("FIREBASE_CREDENTIALS"))
    )

    GS_DEFAULT_ACL = "publicRead"

    # MEDIA_URL можно так:
    MEDIA_URL = f"https://storage.googleapis.com/{GS_BUCKET_NAME}/"
else:
    # Локальная разработка
    MEDIA_URL = "/media/"
    MEDIA_ROOT = BASE_DIR / "media"

customColorPalette = [
        {
            'color': 'hsl(4, 90%, 58%)',
            'label': 'Red'
        },
        {
            'color': 'hsl(340, 82%, 52%)',
            'label': 'Pink'
        },
        {
            'color': 'hsl(291, 64%, 42%)',
            'label': 'Purple'
        },
        {
            'color': 'hsl(262, 52%, 47%)',
            'label': 'Deep Purple'
        },
        {
            'color': 'hsl(231, 48%, 48%)',
            'label': 'Indigo'
        },
        {
            'color': 'hsl(207, 90%, 54%)',
            'label': 'Blue'
        },
    ]
CKEDITOR_5_CONFIGS = {
    'default': {
        'toolbar': ['heading', '|', 'bold', 'italic', 'link',
                    'bulletedList', 'numberedList', 'blockQuote', 'imageUpload', ],

    },
    'extends': {
        'blockToolbar': [
            'paragraph', 'heading1', 'heading2', 'heading3',
            '|',
            'bulletedList', 'numberedList',
            '|',
            'blockQuote',
        ],
        'toolbar': ['heading', '|', 'bold', 'italic', 'link', 'underline', 'strikethrough',
            'code', 'subscript', 'superscript', 'highlight', '|', 'fontColor', 'fontBackgroundColor',
            'codeBlock', 'sourceEditing', 'insertImage', 'bulletedList', 'numberedList',
            'todoList', '|', 'blockQuote', 'imageUpload', '|', 'fontSize', 'fontFamily',
            'mediaEmbed', 'removeFormat', 'insertTable'],
        'image': {
            'toolbar': ['imageTextAlternative', '|', 'imageStyle:alignLeft',
                        'imageStyle:alignRight', 'imageStyle:alignCenter', 'imageStyle:side',  '|'],
            'styles': [
                'full',
                'side',
                'alignLeft',
                'alignRight',
                'alignCenter',
            ]

        },
        'table': {
            'contentToolbar': [ 'tableColumn', 'tableRow', 'mergeTableCells',
            'tableProperties', 'tableCellProperties' ],
            'tableProperties': {
                'borderColors': customColorPalette,
                'backgroundColors': customColorPalette
            },
            'tableCellProperties': {
                'borderColors': customColorPalette,
                'backgroundColors': customColorPalette
            }
        },
        'heading' : {
            'options': [
                { 'model': 'paragraph', 'title': 'Paragraph', 'class': 'ck-heading_paragraph' },
                { 'model': 'heading1', 'view': 'h1', 'title': 'Heading 1', 'class': 'ck-heading_heading1' },
                { 'model': 'heading2', 'view': 'h2', 'title': 'Heading 2', 'class': 'ck-heading_heading2' },
                { 'model': 'heading3', 'view': 'h3', 'title': 'Heading 3', 'class': 'ck-heading_heading3' }
            ]
        }
    },
    'list': {
        'properties': {
            'styles': 'true',
            'startIndex': 'true',
            'reversed': 'true',
        }
    }
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'axes.middleware.AxesMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "csp.middleware.CSPMiddleware",
]
AUTHENTICATION_BACKENDS = [
    'axes.backends.AxesBackend',
    'django.contrib.auth.backends.ModelBackend',
    'shop.views_scripts.backends.EmailOrUsernameModelBackend',
]

AXES_FAILURE_LIMIT = 10
AXES_COOLOFF_TIME = timedelta(minutes=5)
AXES_LOCKOUT_URL = '/lockout/'
AXES_ENABLED = True
AXES_LOCKOUT_PARAMETERS = [["username", "ip_address"]]

ROOT_URLCONF = 'OnlineShop.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'shop/templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                'shop.context_processor.get_current_tour',
                'shop.context_processor.get_current_year',
                'shop.context_processor.user_role',
            ],
        },
    },
]

WSGI_APPLICATION = 'OnlineShop.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'uk'

TIME_ZONE = 'UTC'
LOGIN_URL = 'login'
USE_I18N = True
USE_L10N = True
LOCALE_PATHS = [os.path.join(BASE_DIR, 'locale')]
LANGUAGES = [
    ('uk', _('Ukrainian')),
]

USE_TZ = True

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')

EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'shop/static'),
]

MEDIA_ROOT = os.path.join(BASE_DIR, 'shop/media')
# URL, по которому файлы будут доступны
MEDIA_URL = '/media/'
CKEDITOR_UPLOAD_PATH = "uploads/"
# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


LOG_DIR = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # Save Django's default loggers
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname}: {message}',
            'style': '{',
        },
    },
    'filters': {
        'ignore_static': {
            '()': 'shop.logging_filters.IgnoreStaticFilesFilter',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',  # INFO or WARN can be selected for production
            'class': 'logging.handlers.RotatingFileHandler',
            'encoding': 'utf-8',
            'filename': os.path.join(LOG_DIR, 'django.log'),
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'filters': ['ignore_static'],
            'formatter': 'verbose',
            'delay': True,
        },
        'console': {
            'level': 'DEBUG',  # You can use DEBUG for development
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
            'filters': ['ignore_static'],
        },
    },
    'loggers': {
        # Generic logger for Django (includes standard behavior)
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        # Logger for queries - only errors are logged
        'django.request': {
            'handlers': ['file'],
            'level': 'ERROR',
            'propagate': False,
        },
        # Example for your application ('shop' is the name of the application)
        'shop': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',  # DEBUG can be enabled here for detailed tracking
            'propagate': True,
        },
    },
}